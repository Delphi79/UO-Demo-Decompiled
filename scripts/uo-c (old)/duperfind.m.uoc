// UO-C (old)
include sk_table;

scriptvar integer Q5AC;
scriptvar integer Q5AM;
scriptvar integer Q5AE;

extern integer Q4CB(obj it, list Q514);

function integer Q4Z6(obj Q68D)
{
  integer Q65M = getObjType(Q68D);
  if(Q65M == 0x0EED)
  {
    return(0x01);
  }
  return(0x00);
}

function integer Q4ZY(obj Q68D)
{
  integer Q65M = getObjType(Q68D);
  if((Q65M >= 0x0F78) && (Q65M <= 0x0F91))
  {
    return(0x01);
  }
  return(0x00);
}

function integer Q4ZE(obj Q68D)
{
  integer Q65M = getObjType(Q68D);
  if((Q65M >= 0x1BE3) && (Q65M <= 0x1BFA))
  {
    return(0x01);
  }
  return(0x00);
}

function integer Q4CA(obj Q68D)
{
  if(Q4ZY(Q68D))
  {
    Q5AM = Q5AM + getQuantity(Q68D);
    if(Q5AM > 0x00013880)
    {
      return(0x01);
    }
  }
  if(Q4Z6(Q68D))
  {
    Q5AC = Q5AC + getQuantity(Q68D);
    if(Q5AC > 0x00061A80)
    {
      return(0x01);
    }
  }
  if(Q4ZE(Q68D))
  {
    Q5AE = Q5AE + getQuantity(Q68D);
    if(Q5AE > 0x2710)
    {
      return(0x01);
    }
  }
  if(isContainer(Q68D))
  {
    list Q4E4;
    getContents(Q4E4, Q68D);
    if(Q4CB(Q68D, Q4E4))
    {
      return(0x01);
    }
  }
  return(0x00);
}

function integer Q4CB(obj it, list Q514)
{
  obj Q68D;
  integer num = numInList(Q514);
  for(integer i = 0x00; i < num; i ++)
  {
    Q68D = Q514[i];
    if(Q4CA(Q68D))
    {
      return(0x01);
    }
  }
  return(0x00);
}

function integer Q4BM(obj it)
{
  if(isMobile(it))
  {
    list Q4O4;
    getEquipment(Q4O4, it);
    obj bank = getItemAtSlot(it, 0x1D);
    if(bank != NULL())
    {
      appendToList(Q4O4, bank);
    }
    if(Q4CB(it, Q4O4))
    {
      return(0x01);
    }
  }
  if(isContainer(it))
  {
    list Q4E4;
    getContents(Q4E4, it);
    if(Q4CB(it, Q4E4))
    {
      return(0x01);
    }
  }
  if(!isMobile(it))
  {
    if(Q4CA(it))
    {
      return(0x01);
    }
  }
  return(0x00);
}

function integer Q4CS(obj Q68S)
{
  integer s = getRealStrength(Q68S);
  integer d = getRealDexterity(Q68S);
  integer i = getRealIntelligence(Q68S);
  integer Q5W7 = abs(s) + abs(d) + abs(i);
  integer Q5TT = abs(getStatMod(Q68S, 0x00));
  integer Q4IR = abs(getStatMod(Q68S, 0x01));
  integer Q4XV = abs(getStatMod(Q68S, 0x02));
  integer Q5W6 = Q5TT + Q4IR + Q4XV;
  if((s < 0x00) || (d < 0x00) || (i < 0x00) || (s > 0x69) || (d > 0x69) || (i > 0x69) || (Q5W7 > 0xEB))
  {
    return(0x01);
  }
  if((Q5TT > 0x0F) || (Q4IR > 0x0F) || (Q4XV > 0x0F) || (Q5W6 > 0x28))
  {
    return(0x01);
  }
  integer Q63R = 0x00;
  integer Q63W = 0x00;
  for(integer Q525 = 0x00; Q525 < 0x2E; Q525 ++)
  {
    integer Q4FC = getSkillLevelNoStatNoMod(Q68S, Q525);
    integer Q44X = abs(Q4FC);
    integer Q4G1 = getSkillMod(Q68S, Q525);
    integer Q44Y = abs(Q4G1);
    if((Q4FC < 0x00) || (Q4FC > 0x041A) || (Q44Y > 0x012C))
    {
      return(0x01);
    }
    Q63R = Q63R + Q44X;
    Q63W = Q63W + Q44Y;
  }
  if((Q63R > 0x1BBC) || (Q63W > 0x01F4))
  {
    return(0x01);
  }
  return(0x00);
}

on creation()
{
  if((!isEditing(this)) && (!hasObjVar(this, "checked")))
  {
    string Q56O;
    integer Q4QI;
    if(Q4BM(this))
    {
      Q4QI = 0x01;
      Q56O = "autocheck: possible duper";
    }
    if(Q4QI)
    {
      if(getGMCallStatus())
      {
        addHelpRequestToQueue(this, 0x01, 0x00, Q56O);
      }
      else
      {
        integer Q450 = getAccountNum(this);
        integer Q4B9 = getCharacterNum(this);
        string name = getName(this);
        logEntry(Q450, Q4B9, this, name, "cheating", "cheater", Q56O);
      }
    }
  }
  detachScript(this, "duperfind");
  return(0x01);
}